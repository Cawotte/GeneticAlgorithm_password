
import java.util.Scanner;


public class Main {


    public static void main(String[] args) {

        boolean pwd_valid;
        String input;
        String password;
        String alphabet ="abcdefghijklmnopqrstuvwxyz ";
        char[] str_alphabet = alphabet.toCharArray();

        int nb_individuals;
        int max_gen;
        int nb_gen;

        //--- The User choose the default value and password to find
        Scanner sc = new Scanner(System.in);
        System.out.println("------------------------------------------------");
        System.out.println("Enter the word the algorithm has to find ( only lowercase letters + space character allowed ) :");
        password = sc.nextLine();

        //System.out.println("word : \'" + password + "\'");

        //We test if the characters used in the word are the same than in the alphabet
        do {
            pwd_valid = true;
            for ( char character : password.toCharArray() ) {
                if ( alphabet.indexOf(character) < 0 ) {
                    pwd_valid = false;
                }
            }
            //If not, we ask a new input
            if ( !pwd_valid ) {
                System.out.println("Please enter a word with the correct syntax : only lowercase letters and space characters allowed :");
                password = sc.nextLine();
                //System.out.println("word : \'" + password + "\'");

            }
        } while ( !pwd_valid );

        //We then ask for the size of the population.
        System.out.println("Enter the size of the population generated by the algorithm, bigger is faster");
        while (  !sc.hasNextInt() ) {
            input = sc.next();
            System.out.println("Please enter a number");
        }
        nb_individuals = sc.nextInt();

        //We ask for the number max of generations
        System.out.println("Enter the maximum number of generation allowed, if no results is found after this number of generation, the algorithm will stop :");
        while ( !sc.hasNextInt() ) {
            input = sc.next();
            System.out.println("Please enter a number");
        }
        max_gen = sc.nextInt();

        System.out.println("------------------------------------------------");
        System.out.println("Word to find : \'" + password + "\'");
        System.out.println("Population size : " + nb_individuals);
        System.out.println("Maximum number of generations : " + max_gen);
        System.out.println("------------------------------------------------");

        nb_gen = 1;
        /* We generate a random population :
            We generate N genes of the same length than the password with random alleles, or we can say
            We generate N char[] with the same length than the password with random str_alphabet characters in each slot.
         */
        Population population = new Population(str_alphabet, password.length(), nb_individuals);
        population.calculateFitness(password);
        //--- We display data on the current generation :
        Individual bestFit = population.bestFitness();
        System.out.println("Generation #" + nb_gen + " : " + bestFit.toString());

        //This is generation 1, we keep making new generations till we find an individual with the perfect fitness.
        while ( population.bestFitnessInPopulation() != password.length() && nb_gen < max_gen ) {

            //System.out.println(population.toString());
            //--- Each generation, we want to replace the worst half of the population.

            population.newGeneration();
            population.calculateFitness(password);

            nb_gen++;

            //--- We display data on the new generation :
            bestFit = population.bestFitness();
            System.out.println("Generation #" + nb_gen + " : " + bestFit.toString());

            /*
            try {
                Thread.sleep(400);
            } catch ( Exception exp) {

            } */
        }

        System.out.println("\nAlgorithm terminated after " + nb_gen + " generations !");
        System.out.println("Best result : " + bestFit.toString() );
        System.out.println("Number of mutation : " + population.getMutationCount());
        //System.out.println("Population finale :");
        //System.out.println(population.toString());


    }

}
